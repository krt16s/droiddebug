/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.lang.*;
import java.io.*;
import java.nio.file.*;

import uk.gov.nationalarchives.droid.core.*;
import uk.gov.nationalarchives.droid.core.interfaces.*;
import uk.gov.nationalarchives.droid.core.interfaces.resource.FileSystemIdentificationRequest;
import uk.gov.nationalarchives.droid.core.interfaces.resource.RequestMetaData;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        doDroidIdent(args[0], args[1]);
    }

    public static void doDroidIdent(String sigfile, String idfile) {
        File file = new File(idfile);

        BinarySignatureIdentifier mysig = new BinarySignatureIdentifier();
        mysig.setSignatureFile(sigfile);
        try {
            mysig.init();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        try {
            IdentificationResultCollection results = null;

            System.out.println("MEMINFO: " + Runtime.getRuntime().maxMemory() + " max, " + Runtime.getRuntime().freeMemory() + " free, " + Runtime.getRuntime().totalMemory() + " total");
            long sizelimit = file.length();
            System.out.println("droid sizelimit: " + sizelimit);
            RequestMetaData metadata = new RequestMetaData(sizelimit, file.lastModified(), file.getName());
            RequestIdentifier identifier = new RequestIdentifier(file.toURI());
            FileSystemIdentificationRequest request = null;

            try {
                request = new FileSystemIdentificationRequest(metadata, identifier);
                request.open(file);
                results = mysig.matchBinarySignatures(request);
                System.out.println("MEMINFO: " + Runtime.getRuntime().maxMemory() + " max, " + Runtime.getRuntime().freeMemory() + " free, " + Runtime.getRuntime().totalMemory() + " total");

            } catch (Exception ex) {
                System.out.println("Error while processing with Droid: " + ex);
                System.out.println("MEMINFO: " + Runtime.getRuntime().maxMemory() + " max, " + Runtime.getRuntime().freeMemory() + " free, " + Runtime.getRuntime().totalMemory() + " total");
            } finally {
                if (request != null) {
                    request.close();
                }
            }

            if (results.getResults().size() == 0) {
                System.out.println(".size() == 0");
                results = mysig.matchExtensions(request, false);

            }

            for (IdentificationResult res : results.getResults()) {
                System.out.println("droid-mimetype " + res.getMimeType());
                System.out.println("droid-typename " + res.getName());
                System.out.println("droid-puid " + res.getPuid());
                System.out.println("droid-x-version " + res.getVersion());
                System.out.println("droid-x-extid " + res.getExtId());
            }

        } catch (Exception ex) {
            System.out.println("Error using Droid: " + ex.getMessage());
            System.out.println("MEMINFO: " + Runtime.getRuntime().maxMemory() + " max, " + Runtime.getRuntime().freeMemory() + " free, " + Runtime.getRuntime().totalMemory() + " total");
        }


    }

}
